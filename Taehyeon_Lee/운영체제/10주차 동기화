# 동기화

# [운영체제] CHAPTER 6

### ⏰ 40 min ( 3 combo )

## First Combo

---

> 태현이는 열심히 노력하고 준비한 끝에 앞선 과정을 돌파하고 “JJW” 최종 면접 자리에 도달했습니다. 텔레파시로 답안을 작성해서 태현이의 면접을 도와주자 !
> 

### 2 - 1. 저희 JJW에는 **혼자 집중**하여 업무할 수 있는 “집중**실**”이라는게 있어요. 이 집중**실을** 예약,사용하는 **크루들**을 바탕으로 경쟁 상태(상황)에 대해 설명해보시겠어요 ? 또한 올바른 수행을 위해서 행해야 하는 건 무엇일가요?

- 단 자신이 사용한 단어(OS 용어)가 집중실의 무엇인지 설명할 것

집중실은 critical section을 의미하며 이 집중실을 예약, 사용하는 크루는 프로세스라고 할 수 있습니다

critical section은 프로세스들이 공유하는 공유 데이터에 접근하는 코드 영역을 의미합니다

공유 데이터에 여러 프로세스가 동시에 접근하여 데이터를 수정한다면 데이터 일관성이 깨지기 때문에, 여러 프로세스가 동일한 데이터를 접근하는 코드를 동시에 실행하지 않도록 주의해야 합니다

### 2 - 2. 흐음… 좋네요 태현씨 그렇다면 임계구역에 대해 아는 만큼 말해줄 수 있나요 ?

critical section은 프로세스들이 공유하는 공유 데이터에 접근하는 코드 영역을 의미합니다, 여러 프로세스가 병렬적으로 실행되며, 데이터를 공유하는 작업이 존재하게됩니다. 만약 같은 데이터 영역을 서로다른 프로세스가 동시에 접근하는 경우 데이터의 일관성에 문제가 발생할 수 있습니다. 이처럼 공유 데이터 영역을 동시에 접근하여 발생하는 문제를 critical section problem이라고 합니다

### 2 - 3. 그렇다면 임계 구역 문제를 해결하기 위한 핵심 접근인 상호 배제에 대해 설명해보시겠어요?

mutual exclusive는 하나의 프로세스가 critical section을 실행 중 인경우, 다른 어떠한 프로세스도 해당 CS(critical section)영역을 실행 시킬 수없는 것을 의미합니다. 동시에 2개 이상의 프로세스가 한 데이터 주소에 접근하는 것을 금지함으로써 데이터의 일관성을 유지할 수 있습니다

### 2 - 4. Mutex에 대해 개념을 한문장으로 기술해보세요 ( 쉬어가는 질문입니다. 짧게 기술 )

Mutual exclusive의 약자로 0과 1로 표현되는 lock 변수를 통해 두 프로세스가 동일한 critical section을 실행하지않도록 방지하는 기술입니다

### 2 - 5. 그렇다면 Mutex가 동작하는 방식을 위에서 말한 “집중실”을 비유로 설명해보세요

- 단 자신이 사용한 단어가 집중실의 무엇인지 설명할 것 (예약이라는 단어를 사용하시오)

한 크루가 집중실을 사용하고 있다면 다른 크루들에게 현재 자신이 집중실을 사용하고 있음을 알림으로써, 다른 어떤 크루도, 자신이 집중실을 모두 사용할 때까지, 사용하지 못하도록 막는 것을 의미합니다. 다른 크루는 다음 집중실 사용을 예약하므로써 집중실이 비기를 기다린다

이 크루는 집중실을 모두 사용하고 나서 자신의 집중실 사용이 완료되었음을 알림으로써 다른 크루가 집중실을 사용할 수 있도록 합니다

## **Second Combo**

---

### 2 - 1. Semaphore와 Mutex를 비교하시오. (공유 자원, 권한이라는 단어 필수)

mutex는 0과 1의 2가지 상태만을 가지며, 한 순간에 오직 하나의 프로세스만 공유 자원에 접근하는 것을 허용합다

semaphore는 count semaphore와 binary semaphore로  구분되어집니다

binary semaphore는 mutex lock 과 비슷하게 동작하며, 0,1의 상태를 가지고 lock 상태를 표현합니다.

count semaphore는 공유 자원에 대한 접근 권한이 해당 공유 자원의 수만큼 할당 되는 것이 mutex와의 차이점이라고 할 수 있습니다.

현재 사용 가능한 자원의 개수를 count 변수로 나타내며, 초기값은 프로세스들이 사용 가능한 전체 자원의 수로 초기화 되며, 프로세스가 공유 자원에 접근 할때마다 1씩 감소하게됩니다. 만약 count값이 0보다 작은 경우에는 프로세스를 wait state로 전환하여, busy waiting을 방지할 수 있습니다.

count값이 음수인 경우에는 해당 값의 절대값이 공유자원에 접근하기 위해 대기 중인 프로세스 수를 의미합니다.

> 획기적인 아이디어로 대박을 친 “JJW”는 신사옥으로 이전했습니다. 신사옥으로 이전하면서 기존 1개의 회의실을 **2개**로 늘렸습니다. 그리고 여러분의 의견을 수렴하여 **대기실** 또한 만들었습니다 ! 그리고 지금 연서는 최종 면접 자리에 있습니다…. (두근 두근)
> 

### 2 - 2.  연서씨 저희는 개발 A,B,C팀이 있습니다. 세마포어를 3개의 팀이 회의실을 사용하는 과정을 으로 설명해보세요. (회의실 입구에는 숫자를 나타내는 전광판이 있다) (사용 순서는 A , B , C)

binary semaphore로 접근할 수 있다

### 3 - 3. 연서씨 사실 저희는 개발 팀이 10개가 있는데 회의실은 2개밖에 없어요…. 근데 회의실은 늘릴 수 없거든요 ? 여기 판때기 드릴게요.

프로세스가 10개 존재하지만 semaphore가 2개인 경우로 이해할 수 있다

첫번째 프로세스와 2번째 프로세스는 critical section에 접근하여 코드를 실행한다

이때, 나머지 8개의 프로세스는  critical section내의 코드에 도착한 순간 wait()명령어에 의해 

waiting state로 전환되며, cpu 스케줄러는 프로세스를 ready큐에 넣는다

앞의 2개의 프로세스가 critical section을 빠져나오는 경우 readyQueue의 프로세스를 재개함으로써 다른 2개의 프로세스가 critical section을 수행할 수 있게 된다

이 과정을 반복하며, 모든 프로세스가 critical section을 동시에 실행하는 것을 회피하며 실행할 수 있다

- **3-3을 보고 욕이 나온다면 열어보시오**
    
    ‘판때기를 회의실에 배치한다’는 제가 원하는 답이 아니에요 연서 씨
    

## 두근 두근 나 정연서의 첫 출근날….

![Untitled](%E1%84%83%E1%85%A9%E1%86%BC%E1%84%80%E1%85%B5%E1%84%92%E1%85%AA%201f44db991ee3456f8fd0072d7276a30c/Untitled.png)

상황 (개발 A팀의 **한얼이형**과 **수빈**,**태현**이는 커피를 마실 것이다. 근데 **A팀에는 독특한 방식**으로 커피를 마신다.)

> 1.  A팀의 탕비실은 오직 **한 사람만 들어갈 수 있는 공간**이다.
2. 꼰대 문화가 심한 A팀 탕비실은 **나이가 많은 사람이 나이가 적은 사람을 즉시 쫒아내고 자신이 탕비실을 사용**할 수 있다.
3. A팀에서 오직 태현이만 커피 머신을 사용하지 않는다.
4. A팀 탕비실에는 **커피 머신**이 한개 있는데 중요한 점은 지문 인식이다. 그리고 지문을 2번 찍는 과정을 통해 **잠금, 해제가 존재**한다.
5. 커피 머신이 잠겨있다면 후에 들어온 사람이 사용하려 할때 **그냥 나간다.**
> 

### 3 - 4. 길을 가던 B팀 권일이는 연서를 보고 말합니다. 
연서씨 위 상황에서 발생할 수 있는 문제를 동기화 관점에서 말해보세요.

우선순위 역전 상태를 의미한다(priority inversion)

한얼, 태현, 수빈, 을 각각 A, B, C 프로세스라고 가정하자

각각의 프로세스의 우선순위는 A가 가장 높으며, C가 가장 낮다

이때 C가 탕비실을 먼저 이용하고 있는 경우, 즉, 우선순위가 가장 낮은 프로세스가 critical section을 실행하고 있는 경우를 생각해보자

이때 A가 탕비실에 도착한다면, 커피머신을 C가 잠갔기 때문에 A는 대기하게된다, 이때, B가 탕비실에 도착하게된 경우를 집중적으로 생각해보자

이때 B는 커피머신을 사용하지 않기 때문에, 나이가 적은 C를 탕비실에서 쫓아낼 수 있다.

즉 B는 critical section에 접근하지 않기 때문에, 우선순위가 낮은 C에게서 cpu를 선점할 수 있다

이렇게 된 경우, A가 B보다 우선순위가 높고, 먼저 도착했음에도 불구하고 낮은 우선순위의 B때문에 대기시간이 더 길어지게 되었다

결론적으로는 우선순위가 낮은 B가 먼저 실행되는 결과를 낳은 것으로 우선순위 역전이 발생했다고 볼 수 있다

### 3 - 5. 연서의 대답이 흡족스러운 권일이는 회식을 진행합니다. 술이 들어간 수빈이는 그동안 담아왔던 말을 연서한테 하는데요….

![Untitled](%E1%84%83%E1%85%A9%E1%86%BC%E1%84%80%E1%85%B5%E1%84%92%E1%85%AA%201f44db991ee3456f8fd0072d7276a30c/Untitled%201.png)

### 위는 교착상태에요 ! 연서 언니는 아직 뒤에 교착상태 해결 방법을 안배웠어요 . 위에 P0와 P1이 교착상태가 발생하는 근본적 이유에 대해 생각해보세요.

p0와 p1이 교착상태가 발생하는 이유는 하나 critical section에 대한 lock을 걸고 푸는 주체가 하나이기 때문에 발생한다

한 critical section에 대해 p1이 lock을 거는 경우 해당 lock은 p1만 풀 수 있다. 

이때 p1이 lock을 해제하기 전에 p2가 lock을 거는 경우, 두 프로세스 모두 lock상태를 벗어 나지 못하게되어 두 프로세스 모두 무한 대기하는 교착상태가 벌어지게 된다

### 3 - 6 교착 상태를 발견하는 프로그램을 만들고 있는데 어떤 알고리즘을 쓰는게 좋을가요?

교착 상태를 발견하는 프로그램

벨만-포드 알고리즘? 사이클을 감지하기 위해서 사용할 수 있다

## **Third Combo**

---

### Third Combo는 실제 면접 방식입니다. 
토글로 이루어져 있으며 상위 토글의 문제를 해결하지 못한 경우 아래 토글을 풀 수 없습니다. 
(다음 문제 지문에 이전 문제의 정답이 있습니다. 고로 본인 실력확인을 위해 앞의 문제를 먼저 푸세요)

- **문제 1**
    
    **모니터의 개념**에 대해 간단하게 기술하세요
    

### 문제 1의 정답

응용 개발자가 HW inst를 사용하지 못하기 때문에, 쉽게 사용할 수 있도록 개발된 race condition을 막는 기술을 의미한다

